# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  - main

# PR triggers
pr:
  branches:
    include:
      - main
  paths:
    include:
      - pipelines/azure-pipelines.yml
      - src/*

variables:
  # Solution name
  solution: "src/WingetCreateCLI.sln"

  # Appx Package Directory
  appxPackageDir: '$(Build.ArtifactStagingDirectory)\AppxPackages'

  # Portable executables directory
  portableExecutablesDir: '$(Build.ArtifactStagingDirectory)\PortableExecutables'

  # WingetCreate Msix Bundle Directory
  wingetCreatePackageDir: '$(appxPackageDir)\WingetCreateMsixBundle'

  # Working Directory
  workingDirectory: "src"

  # Build configuration
  buildConfiguration: "Release"

  # Build platform
  buildPlatform: "x64"

  # Target framework
  targetFramework: "net8.0-windows10.0.26100.0"

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    settings:
      skipBuildTagsForGitHubPullRequests: true

    stages:
      - stage: GetVersion_Build

        jobs:
          - job: GetVersion
            variables:
              runCodesignValidationInjection: ${{ false }}
              skipComponentGovernanceDetection: ${{ true }}
            steps:
              - task: PowerShell@2
                name: GetVersionStep
                displayName: Get version from CLI project
                inputs:
                  targetType: "inline"
                  script: |
                    [xml]$project = get-content "$(workingDirectory)/WingetCreateCLI/WingetCreateCLI.csproj"
                    $version = $project.Project.PropertyGroup.Version
                    echo "##vso[task.setvariable variable=majorMinorVersion;isOutput=true]$version"

          - job: Build
            displayName: Build
            dependsOn: GetVersion
            variables:
              majorMinorVersion: $[dependencies.GetVersion.outputs['GetVersionStep.majorMinorVersion']]
              # Only update counter for non-PR builds, otherwise just use 0 for the revision
              ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
                buildVersion: 0
              ${{ if not(eq(variables['Build.Reason'], 'PullRequest')) }}:
                buildVersion: $[counter(variables['majorMinorVersion'], 1)]

              version: "$(majorMinorVersion).$(buildVersion).0"
              appxBundlePath: '$(wingetCreatePackageDir)\Microsoft.WindowsPackageManagerManifestCreator_$(version)_8wekyb3d8bbwe.msixbundle'

            steps:
              - checkout: self
                lfs: "true"
                submodules: true

              - task: PowerShell@2
                displayName: Display version and bundle path for diagnosing
                inputs:
                  targetType: inline
                  script: |
                    echo $(version)
                    echo $(appxBundlePath)

              - task: PowerShell@2
                displayName: "Update package manifest version"
                inputs:
                  targetType: inline
                  script: |
                    [xml]$manifest = get-content "$(workingDirectory)/WingetCreatePackage/Package.appxmanifest"
                    $manifest.Package.Identity.Version = "$(version)"
                    $manifest.save("$(workingDirectory)/WingetCreatePackage/Package.appxmanifest")

              - task: DotNetCoreCLI@2
                displayName: Restore
                inputs:
                  command: "restore"
                  feedsToUse: "config"
                  nugetConfigPath: "NuGet.config"
                  projects: $(workingDirectory)/**/*.csproj

              - displayName: Build rust-msi
                pwsh: |
                  rustup target add aarch64-pc-windows-msvc
                  cargo build --release --target x86_64-pc-windows-msvc
                  cargo build --release --target aarch64-pc-windows-msvc
                  $cmdstr = 'cargo zigbuild --release --target x86_64-unknown-linux-gnu && ' + 
                    'cargo zigbuild --release --target aarch64-unknown-linux-gnu && ' +
                    'cargo zigbuild --target aarch64-apple-darwin'
                  docker run --rm -v ${pwd}:c:\io -w c:\io ghcr.io/rust-cross/cargo-zigbuild.windows:main cmd /c $cmdstr
                workingDirectory: $(workingDirectory)/WingetCreateCore/Common/Msi/rust-msi

              - task: MSBuild@1
                displayName: Build Solution
                inputs:
                  platform: "$(buildPlatform)"
                  solution: "$(solution)"
                  configuration: "$(buildConfiguration)"
                  msbuildArguments: '/p:AppxBundleOutput="$(appxBundlePath)"
                    /p:UapAppxPackageBuildMode=SideloadOnly
                    /p:AppxPackageSigningEnabled=false'

              - task: VSTest@2
                displayName: Run Tests
                inputs:
                  testSelector: "testAssemblies"
                  testAssemblyVer2: 'src\WingetCreateTests\WingetCreateTests\bin\$(buildPlatform)\$(buildConfiguration)\$(targetFramework)\WingetCreateTests.dll'
                  runSettingsFile: 'src\WingetCreateTests\WingetCreateTests\Test.runsettings'
                  overrideTestrunParameters: '-WingetPkgsTestRepoOwner microsoft -WingetPkgsTestRepo winget-pkgs-submission-test -GitHubAppPrivateKey "$(GitHubApp_PrivateKey)"'                    

              - task: DotNetCoreCLI@2
                displayName: "Publish (win-x64)"
                inputs:
                  command: "publish"
                  projects: "WingetCreateCLI.csproj"
                  arguments: "-c Release -r win-x64 --output ./output/win-x64"
                  workingDirectory: "$(workingDirectory)/WingetCreateCLI"

              - task: DotNetCoreCLI@2
                displayName: "Publish (win-arm64)"
                inputs:
                  command: "publish"
                  projects: "WingetCreateCLI.csproj"
                  arguments: "-c Release -r win-arm64 --output ./output/win-arm64"
                  workingDirectory: "$(workingDirectory)/WingetCreateCLI"

              - task: DotNetCoreCLI@2
                displayName: "Publish (linux-x64)"
                inputs:
                  command: "publish"
                  projects: "WingetCreateCLI.csproj"
                  arguments: "-c Release -r linux-x64 --output ./output/linux-x64"
                  workingDirectory: "$(workingDirectory)/WingetCreateCLI"

              - task: DotNetCoreCLI@2
                displayName: "Publish (linux-arm64)"
                inputs:
                  command: "publish"
                  projects: "WingetCreateCLI.csproj"
                  arguments: "-c Release -r linux-arm64 --output ./output/linux-arm64"
                  workingDirectory: "$(workingDirectory)/WingetCreateCLI"

              - task: DotNetCoreCLI@2
                displayName: "Publish (osx-arm64)"
                inputs:
                  command: "publish"
                  projects: "WingetCreateCLI.csproj"
                  arguments: "-c Release -r osx-arm64 --output ./output/osx-arm64"
                  workingDirectory: "$(workingDirectory)/WingetCreateCLI"

              - task: 1ES.PublishPipelineArtifact@1
                inputs:
                  targetPath: $(wingetCreatePackageDir)
                  artifactName: wingetcreate_msixbundle
                  displayName: Publish WingetCreate msix bundle

              - pwsh: |
                  @('win-x64', 'win-arm64', 'linux-x64', 'linux-arm64', 'osx-arm64') | ForEach-Object {
                    $wc = get-item ./$_/WingetCreateCLI$(if($_.StartsWith("win")){".exe"})
                    move-item $wc.fullname $(portableExecutablesDir)\wingetcreate-$_$(if($_.StartsWith("win")){".exe"})
                  }
                  move-item $(portableExecutablesDir)\wingetcreate-osx-arm64 $(portableExecutablesDir)\wingetcreate-macos-arm64
                workingDirectory: $(workingDirectory)/WingetCreateCLI/output

              - task: 1ES.PublishPipelineArtifact@1
                inputs:
                  targetPath: $(portableExecutablesDir)
                  artifactName: wingetcreate_exes
                  displayName: Publish WingetCreate executables

              - task: ComponentGovernanceComponentDetection@0
                displayName: Component Governance
                inputs:
                  scanType: "Register"
                  verbosity: "Verbose"
                  alertWarningLevel: "High"

              - task: notice@0
                displayName: "NOTICE File Generator"
                condition: not(eq(variables['Build.Reason'], 'PullRequest'))
                inputs:
                  outputfile: "$(System.DefaultWorkingDirectory)/temp/NOTICE.txt"
                  outputformat: "text"

              - bash: |
                  echo "Diffing existing NOTICE.txt with generated version"
                  diff -w NOTICE.txt temp/NOTICE.txt
                  if [[ $? -ne 0 ]];
                  then
                    echo "Notice file modified"
                    echo "*******************************************************************************************************"
                    echo "Download the updated NOTICE.txt from the build artifacts and update the file in your PR, then re-submit"
                    echo "*******************************************************************************************************"
                    exit 1
                  else
                    echo "Notice file not modified."
                  fi
                displayName: "Trigger build warning if NOTICE.txt file needs to be modified."
                condition: not(eq(variables['Build.Reason'], 'PullRequest'))
                continueOnError: "true"
