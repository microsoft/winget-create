# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger: none

variables:
  # Solution name
  solution: "src/WingetCreateCLI.sln"

  # Appx Package Directory
  appxPackageDir: '$(System.DefaultWorkingDirectory)\AppxPackages'

  # Agent VM image name
  vmImageName: "windows-latest"

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)\src'

  # Build configuration
  buildConfiguration: "Release"

  # Build platform
  buildPlatform: "x64"

jobs:
  - job: GetVersion
    variables:
      runCodesignValidationInjection: ${{ false }}
      skipComponentGovernanceDetection: ${{ true }}
    steps:
      - powershell: |
          [xml]$project = get-content "$(workingDirectory)/WingetCreateCLI/WingetCreateCLI.csproj"
          $version = $project.Project.PropertyGroup.Version
          echo "##vso[task.setvariable variable=majorMinorBuildVersion;isOutput=true]$version"
        name: GetVersionStep
        displayName: Get version from CLI project

  - job: Build
    displayName: Build
    dependsOn: GetVersion
    variables:
      majorMinorBuildVersion: $[dependencies.GetVersion.outputs['GetVersionStep.majorMinorBuildVersion']]
      revision: $[counter(format('{0}.{1}', '3', variables['majorMinorBuildVersion']), 1)]

      version: "$(majorMinorBuildVersion).$(revision)"
      appxBundleFile: "Microsoft.WindowsPackageManagerManifestCreator_$(version)_8wekyb3d8bbwe.msixbundle"
      appxBundlePath: '$(appxPackageDir)\$(appxBundleFile)'
      exePath: '$(appxPackageDir)\WingetCreateCLI\wingetcreate.exe'
    pool:
      vmImage: $(vmImageName)

    steps:
      - checkout: self
        lfs: "true"

      - powershell: |
          echo $(version)
          echo $(appxBundlePath)
          echo $(exePath)
          echo "##vso[task.setvariable variable=manifestVersion;isOutput=true]$(version)"
        name: OutputVersionStep
        displayName: Display version and paths for diagnosing

      - powershell: |
          [xml]$manifest = get-content "$(workingDirectory)/WingetCreatePackage/Package.appxmanifest"
          $manifest.Package.Identity.Version = "$(version)"
          $manifest.save("$(workingDirectory)/WingetCreatePackage/Package.appxmanifest")

          [xml]$project = get-content "$(workingDirectory)/WingetCreateCLI/WingetCreateCLI.csproj"
          $project.Project.PropertyGroup.Version = "$(version)"
          $project.save("$(workingDirectory)/WingetCreateCLI/WingetCreateCLI.csproj")
        displayName: "Update cli and package manifest version"

      - task: DeleteFiles@1
        displayName: "Delete existing stubbed TelemetryEventSources.cs. Not necessary, but will cause build to fail if fetch fails."
        inputs:
          Contents: '$(workingDirectory)\WingetCreateCLI\Telemetry\TelemetryEventSource.cs'

      - task: PkgESGitFetch@10
        displayName: "Fetch TelemetryEventSource.cs from OS repo and overwrite stubbed version"
        inputs:
          repository: "https://microsoft.visualstudio.com/os/_git/os.2020"
          branch: official/main
          source: 'minkernel\published\internal\telemetry\TelemetryEventSource.cs'
          destination: '$(workingDirectory)\WingetCreateCLI\Telemetry\'

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          feedsToUse: config
          nugetConfigPath: "nuget.config"
          projects: $(workingDirectory)/**/*.csproj

      - task: DotNetCoreCLI@2
        displayName: Build standalone exe
        inputs:
          command: publish
          publishWebProjects: false
          zipAfterPublish: false
          projects: $(workingDirectory)/**/WingetCreateCLI.csproj
          arguments: "--configuration Release --runtime=win-x64 --output $(appxPackageDir) -p:DebugType=None -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --self-contained=false"

      - task: MSBuild@1
        displayName: Build Solution
        inputs:
          platform: "$(buildPlatform)"
          solution: "$(solution)"
          configuration: "$(buildConfiguration)"
          msbuildArguments: '/p:AppxBundleOutput="$(appxBundlePath)"
            /p:AppxBundle=Always
            /p:UapAppxPackageBuildMode=SideloadOnly
            /p:AppxPackageSigningEnabled=false'

      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
        displayName: "ESRP CodeSigning"
        inputs:
          ConnectedServiceName: "PeetPackageEs2"
          FolderPath: $(appxPackageDir)
          Pattern: |
            $(appxBundleFile),
            "WingetCreateCLI.exe"
          signConfigType: inlineSignParams
          inlineOperation: |
            [
              {
                  "KeyCode" : "CP-230012",
                  "OperationCode" : "SigntoolSign",
                  "Parameters" : {
                      "OpusName" : "Microsoft",
                      "OpusInfo" : "http://www.microsoft.com",
                      "FileDigest" : "/fd \"SHA256\"",
                      "PageHash" : "/NPH",
                      "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  },
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-230012",
                  "OperationCode" : "SigntoolVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
            ]

      - powershell: |
          ren "$(appxPackageDir)\WingetCreateCLI\WingetCreateCLI.exe" wingetcreate.exe
          (Get-FileHash -Algorithm SHA256 -Path $(exePath)).Hash > "$(exePath).txt"
          (Get-FileHash -Algorithm SHA256 -Path $(appxBundlePath)).Hash > "$(appxBundlePath).txt"
        displayName: "Create hash files"

      - task: CopyFiles@2
        displayName: Copy files to be published to staging directory
        inputs:
          targetFolder: $(Build.ArtifactStagingDirectory)
          flattenFolders: true
          contents: |
            $(exePath)
            $(exePath).txt
            $(appxBundlePath)
            $(appxBundlePath).txt

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: wingetcreate
        displayName: Publish appx, exe, and hash files

      - task: GitHubRelease@1
        displayName: Create GitHub release
        inputs:
          gitHubConnection: github
          repositoryName: $(Build.Repository.Name)
          tagSource: userSpecifiedTag
          tag: v$(version)-preview
          isPreRelease: true
          isDraft: true # After running this step, visit the new draft release, edit, and publish.
          assets: $(Build.ArtifactStagingDirectory)/*

  - job: Wait
    displayName: Wait for vanity URL to be manually updated
    dependsOn: Build
    pool: server
    timeoutInMinutes: 1440 # job times out in 1 day
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          instructions: "Please update aka.ms vanity URLs for latest release"

  - job: UpdateManifest
    dependsOn:
      - Build
      - Wait
    pool:
      vmImage: $(vmImageName)
    variables:
      runCodesignValidationInjection: ${{ false }}
      skipComponentGovernanceDetection: ${{ true }}
      manifestVersion: $[dependencies.Build.outputs['OutputVersionStep.manifestVersion']]
      packageUrl: "https://github.com/microsoft/winget-create/releases/download/v$(manifestVersion)-preview/$(appxBundleFile)"
    steps:
      - checkout: none

      - powershell: |
          # These are the steps you'd run in your CI/CD pipeline to update your OWC manifest using wingetcreate.
          # The update command only supports a single installer URL, if you have multiple URLs you'll have to manually modify
          # your manifests as described here https://github.com/microsoft/winget-create#using-windows-package-manager-manifest-creator-in-a-cicd-pipeline

          # https://aka.ms/wingetcreate/latest points to latest version of wingetcreate.exe
          # https://aka.ms/wingetcreate/preview points to latest preview version of wingetcreate.exe
          # requires .NET to be installed on the build machine to operate correctly

          iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
          wingetcreate.exe update -i Microsoft.WingetCreate -u $(packageUrl) -v $(manifestVersion) -t $(GITHUB_PAT) --submit
        displayName: Update package manifest in the OWC
