#
# Localization
# This pipeline uploads English strings files to the localization service, downloads any translated
# files which are available, and checks them in to git. This pipeline relies on Microsoft-internal
# resources to run.
#

# Expects a variable called LocServiceKey to contain the OAuth client secret for Touchdown.

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - pipelines/azure-pipelines.loc.yml
      - src/WingetCreateCLI/Properties/Resources.resx

pr: none

name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
    - stage: Localize
      jobs:
        - job: Localize
          variables:
            skipComponentGovernanceDetection: true
          steps:
          - task: TouchdownBuildTask@4
            displayName: Send resources to Touchdown Build
            inputs:
              teamId: 25160
              authType: FederatedIdentity
              FederatedIdentityServiceConnection: WingetCreateTDBuild
              isPreview: false
              relativePathRoot: src\WingetCreateCLI\Properties
              resourceFilePath: "*.resx"
              outputDirectoryRoot: Localization\Resources

          - task: CmdLine@2
            displayName: Check for changes and create patch file
            inputs:
              script: |
                cd $(Build.SourcesDirectory)
                git add -A
                git diff --cached --exit-code
                echo ##vso[task.setvariable variable=hasChanges]%errorlevel%
                git diff --cached > $(Build.ArtifactStagingDirectory)\LocalizedStrings.patch

          templateContext:
            outputs:
            - output: pipelineArtifact
              displayName: 'Publish patch file as artifact'
              condition: eq(variables['hasChanges'], '1')
              artifactName: Patch
              targetPath: $(Build.ArtifactStagingDirectory)
