<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    <RootNamespace>Microsoft.WingetCreateCore</RootNamespace>
    <TargetFramework>net8.0</TargetFramework>
    <Platforms>x64;ARM64</Platforms>
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-arm64</RuntimeIdentifiers>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' != ''">
    <IsWindows Condition="$(RuntimeIdentifier.StartsWith('win'))">true</IsWindows>
    <IsOSX Condition="$(RuntimeIdentifier.StartsWith('osx'))">true</IsOSX>
    <IsLinux Condition="$(RuntimeIdentifier.StartsWith('linux'))">true</IsLinux>

    <IsX64 Condition="$(RuntimeIdentifier.EndsWith('x64'))">true</IsX64>
    <IsArm64 Condition="$(RuntimeIdentifier.EndsWith('arm64'))">true</IsArm64>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == ''">
    <IsWindows Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))'=='true'">true</IsWindows>
    <IsOSX Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'=='true'">true</IsOSX>
    <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))'=='true'">true</IsLinux>

    <IsX64 Condition="$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture) == X64">true</IsX64>
    <IsArm64 Condition="$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture) == Arm64">true</IsArm64>
  </PropertyGroup>

  <ItemGroup>
    <AdditionalFiles Include="..\stylecop.json" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AsmResolver.PE" Version="5.5.1" />
    <PackageReference Include="AsmResolver.PE.Win32Resources" Version="5.5.1" />
    <PackageReference Include="jose-jwt" Version="5.1.0" />
    <PackageReference Include="Microsoft.CorrelationVector" Version="1.0.42" />
    <!--https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#generatepathproperty-->
    <PackageReference Include="Microsoft.WindowsPackageManager.Utils" Version="1.9.25180" GeneratePathProperty="true" />
    <PackageReference Include="Newtonsoft.Json.Schema" Version="4.0.1" />
    <PackageReference Include="NLog" Version="5.3.4" />
    <PackageReference Include="NSwag.MSBuild" Version="14.1.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Polly" Version="8.5.0" />
    <PackageReference Include="RestSharp" Version="112.1.0" />
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.556">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Octokit" Version="13.0.1" />
    <PackageReference Include="YamlDotNet" Version="16.2.0" />
  </ItemGroup>

  <ItemGroup>
    <None Condition="'$(IsWindows)'=='true' And '$(IsX64)'=='true'" Include="$(MSBuildThisFileDirectory)\Common\Msi\rust-msi\target\x86_64-pc-windows-msvc\release\msi_ffi.dll">
      <Link>msi.dll</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Condition="'$(IsWindows)'=='true' And '$(IsArm64)'=='true'" Include="$(MSBuildThisFileDirectory)\Common\Msi\rust-msi\target\aarch64-pc-windows-msvc\release\msi_ffi.dll">
      <Link>msi.dll</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Condition="'$(IsLinux)'=='true' And '$(IsX64)'=='true'" Include="$(MSBuildThisFileDirectory)\Common\Msi\rust-msi\target\x86_64-unknown-linux-gnu\release\libmsi_ffi.so">
      <Link>libmsi.so</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Condition="'$(IsLinux)'=='true' And '$(IsArm64)'=='true'" Include="$(MSBuildThisFileDirectory)\Common\Msi\rust-msi\target\aarch64-unknown-linux-gnu\release\libmsi_ffi.so">
      <Link>libmsi.so</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Condition="'$(IsOSX)'=='true' And '$(IsArm64)'=='true'" Include="$(MSBuildThisFileDirectory)\Common\Msi\rust-msi\target\aarch64-apple-darwin\debug\libmsi_ffi.dylib">
      <Link>libmsi.dylib</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="CargoBuild_win_x86_64" Condition="'$(IsWindows)'=='true' And '$(IsX64)'=='true'" BeforeTargets="PreBuild;PreBuildEvent">
    <Message Importance="high" Text="Running: cargo build --release --target x86_64-pc-windows-msvc --manifest-path $(ProjectDir)Common\Msi\rust-msi\Cargo.toml" />
    <Exec Command="cargo build --release --target x86_64-pc-windows-msvc --manifest-path $(ProjectDir)Common\Msi\rust-msi\Cargo.toml" />
  </Target>
  <Target Name="CargoBuild_win_arm64" Condition="'$(IsWindows)'=='true' And '$(IsArm64)'=='true'" BeforeTargets="PreBuild;PreBuildEvent">
    <Message Importance="high" Text="Running: cargo build --release --target aarch64-pc-windows-msvc --manifest-path $(ProjectDir)Common\Msi\rust-msi\Cargo.toml" />
    <Exec Command="cargo build --release --target aarch64-pc-windows-msvc --manifest-path $(ProjectDir)Common\Msi\rust-msi\Cargo.toml" />
  </Target>
  <Target Name="CargoBuild_linux_x86_64" Condition="'$(IsLinux)'=='true' And '$(IsX64)'=='true'" BeforeTargets="PreBuild;PreBuildEvent">
    <Message Importance="high" Text="Running: docker run --rm -v $(ProjectDir)Common\Msi\rust-msi:c:\io -w c:\io ghcr.io/rust-cross/cargo-zigbuild.windows:main cargo zigbuild -r --target x86_64-unknown-linux-gnu" />
    <Exec Command="cargo build -r --target x86_64-unknown-linux-gnu --manifest-path $(ProjectDir)Common\Msi\rust-msi\Cargo.toml" />
  </Target>
  <Target Name="CargoBuild_linux_arm64" Condition="'$(IsLinux)'=='true' And '$(IsArm64)'=='true'" BeforeTargets="PreBuild;PreBuildEvent">
    <Message Importance="high" Text="Running: docker run --rm -v $(ProjectDir)Common\Msi\rust-msi:c:\io -w c:\io ghcr.io/rust-cross/cargo-zigbuild.windows:main cargo zigbuild -r --target aarch64-unknown-linux-gnu" />
    <Exec Command="docker run --rm -v $(ProjectDir)Common\Msi\rust-msi:c:\io -w c:\io ghcr.io/rust-cross/cargo-zigbuild.windows:main cargo zigbuild -r --target aarch64-unknown-linux-gnu" />
  </Target>
  <Target Name="CargoBuild_osx_arm64" Condition="'$(IsOSX)'=='true' And '$(IsArm64)'=='true'" BeforeTargets="PreBuild;PreBuildEvent">
    <Message Importance="high" Text="Running: docker run --rm -v $(ProjectDir)Common\Msi\rust-msi:c:\io -w c:\io ghcr.io/rust-cross/cargo-zigbuild.windows:main cargo zigbuild -r --target aarch64-apple-darwin" />
    <Exec Command="docker run --rm -v $(ProjectDir)Common\Msi\rust-msi:c:\io -w c:\io ghcr.io/rust-cross/cargo-zigbuild.windows:main cargo zigbuild --target aarch64-apple-darwin" />
  </Target>

  <ItemGroup>
    <SchemaFiles Include="$(PkgMicrosoft_WindowsPackageManager_Utils)\content\schemas\JSON\manifests\v1.9.0\manifest.defaultLocale.1.9.0.json" ModelName="DefaultLocale" />
    <SchemaFiles Include="$(PkgMicrosoft_WindowsPackageManager_Utils)\content\schemas\JSON\manifests\v1.9.0\manifest.installer.1.9.0.json" ModelName="Installer" />
    <SchemaFiles Include="$(PkgMicrosoft_WindowsPackageManager_Utils)\content\schemas\JSON\manifests\v1.9.0\manifest.locale.1.9.0.json" ModelName="Locale" />
    <SchemaFiles Include="$(PkgMicrosoft_WindowsPackageManager_Utils)\content\schemas\JSON\manifests\v1.9.0\manifest.version.1.9.0.json" ModelName="Version" />
    <SchemaFiles Include="$(PkgMicrosoft_WindowsPackageManager_Utils)\content\schemas\JSON\manifests\v1.9.0\manifest.singleton.1.9.0.json" ModelName="Singleton" />
  </ItemGroup>

  <Target Name="PreBuild" BeforeTargets="PreBuildEvent" Inputs="@(SchemaFiles)" Outputs="@(SchemaFiles -> '$(ProjectDir)Models\%(ModelName)ManifestModels.cs')">
    <Message Importance="high" Text="Rebuilding: %(SchemaFiles.ModelName) because $(ProjectDir)Models\%(ModelName)ManifestModels.cs is older than %(FullPath)" />

    <Exec Command="$(NSwagExe_Net80) jsonschema2csclient /name:%(ModelName)Manifest /namespace:Microsoft.WingetCreateCore.Models.%(SchemaFiles.ModelName) /input:%(FullPath) /output:$(ProjectDir)Models\%(ModelName)ManifestModels.cs /InlineNamedArrays:true /RequiredPropertiesMustBeDefined:false /ArrayType:System.Collections.Generic.List /ArrayInstanceType:System.Collections.Generic.List" />
  </Target>

</Project>
