<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <AssemblyName>WingetCreateCLI</AssemblyName>
    <RootNamespace>Microsoft.WingetCreateCLI</RootNamespace>
    <Version>1.9</Version>
    <Platforms>x64;ARM64</Platforms>
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-arm64</RuntimeIdentifiers>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <DefineConstants>TELEMETRYEVENTSOURCE_PUBLIC</DefineConstants>
    <SignAssembly>true</SignAssembly>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
    <SelfContained>false</SelfContained>
    <PublishSingleFile>true</PublishSingleFile>

    <!-- error AL1012: 'arm64' is not a valid setting for option 'platform' -->
    <GenerateSatelliteAssembliesForCore>true</GenerateSatelliteAssembliesForCore>

    <TargetFramework 
      Condition="$(RuntimeIdentifier.StartsWith('win')) Or '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))'=='true'"
    >net8.0-windows10.0.26100.0</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)'==''">net8.0</TargetFramework> 
  </PropertyGroup>

  <ItemGroup>
    <AdditionalFiles Include="..\stylecop.json" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="CommandLineParser" Version="2.9.1" />
    <PackageReference Include="DesktopBridge.Helpers" Version="1.2.2" />
    <PackageReference Include="NSwag.MSBuild" Version="14.1.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Sharprompt" Version="2.4.5" />
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.556">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="System.Security.Cryptography.ProtectedData" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\WingetCreateCore\WingetCreateCore.csproj" />
  </ItemGroup>

  <!--This is to workaround a similar issue as to what's
  described at https://github.com/dotnet/runtime/issues/3807. When the wapproj is published, the native
  PDBs in its dependencies are declared in the deps.json file, but the PDBs themselves are stripped away
  during the build. It'll build without complaint, but at runtime we get a message like:

  Message: Error:
  An assembly specified in the application dependencies manifest (WingetCreateCLI.deps.json) was not found:
  package: 'Microsoft.WindowsPackageManager.Utils', version: '0.2.2'
  path: 'runtimes/win-x64/native/WinGetUtil.pdb'

  This modifies the inputs to GenerateBuildDependencyFile to remove Wingetutil.pdb from the deps.json file when it's generated.
  -->
  <Target Name="StripNativePDBFromDepsJson" BeforeTargets="GenerateBuildDependencyFile">
    <ItemGroup>
      <RuntimeTargetsCopyLocalItems Remove="@(RuntimeTargetsCopyLocalItems)" Condition="'%(RuntimeTargetsCopyLocalItems.Extension)' == '.pdb' AND %(RuntimeTargetsCopyLocalItems.NuGetPackageId) == 'Microsoft.WindowsPackageManager.Utils'" />
      <NativeCopyLocalItems Remove="@(NativeCopyLocalItems)" Condition="'%(NativeCopyLocalItems.Extension)' == '.pdb' AND %(NativeCopyLocalItems.NuGetPackageId) == 'Microsoft.WindowsPackageManager.Utils'" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <!-- The localized resources are dropped in \Localization\Resources as part of the patch file from TouchDown. We can't simply Include them, as they must appear to be under the
         Properties directory to be properly included. We can fake this by using the <Link> tag which includes them virtually under specified directory -->
    <EmbeddedResource Include="..\..\Localization\Resources\**\*.resx" LinkBase="Properties">
      <Link>%(LinkBase)\%(Filename)%(Extension)</Link>
      <Visible>false</Visible>
    </EmbeddedResource>

    <EmbeddedResource Update="Properties\Resources.resx">
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <Generator>PublicResXFileCodeGenerator</Generator>
      <!-- error AL1012: 'arm64' is not a valid setting for option 'platform' -->
      <StronglyTypedFileName>$(IntermediateOutputPath)\Resources.Designer.cs</StronglyTypedFileName>
      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <SettingSchema Include="$(ProjectDir)\Schemas\settings.schema.0.1.json" ModelName="Settings" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Models\" />
  </ItemGroup>

  <!--Generate settings manifest-->
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent" Inputs="@(SettingSchema)" Outputs="@(SettingSchema -> '$(ProjectDir)Models\%(ModelName)Model.cs')">
      <Message Importance="high" Text="Rebuilding: %(SettingSchema.ModelName) because $(ProjectDir)Models\%(ModelName)Model.cs is older than %(FullPath)" />

    <Exec Command="$(NSwagExe_Net80) jsonschema2csclient /name:%(ModelName)Manifest /namespace:Microsoft.WingetCreateCLI.Models.%(SettingSchema.ModelName) /input:%(FullPath) /output:$(ProjectDir)Models\%(ModelName)Model.cs /InlineNamedArrays:true /RequiredPropertiesMustBeDefined:false /ArrayType:System.Collections.Generic.List /ArrayInstanceType:System.Collections.Generic.List" />
  </Target>
</Project>